/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Presentacion;

import Negocio.BO.CitaMedicaBO;
import Negocio.Exception.NegocioException;
import Negocio.configuracion.DependencyInjector;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SDavidLedesma
 */
public class CitasDoctorFrame extends javax.swing.JFrame {

    int idMedico = SesionActual.getIdMedico();
    CitaMedicaBO citaMedicaBO = DependencyInjector.crearCitaMedicaBO();
    String[] columnas = {"Paciente", "Estado", "Tipo", "Fecha", "Hora", "Folio"};
    DefaultTableModel modelo = new DefaultTableModel(columnas, 0);

    /**
     * Creates new form CitasDoctorFrame
     */
    public CitasDoctorFrame() {
        initComponents();
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        cargarCitasPendientesEnTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCitas = new javax.swing.JTable();
        btnVolver = new javax.swing.JButton();
        btnCita = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tablaCitas.setModel(modelo);
        jScrollPane1.setViewportView(tablaCitas);

        btnVolver.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        btnCita.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCita.setText("Iniciar Cita");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(btnCita, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVolver)
                    .addComponent(btnCita))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        MenuDoctorFrame mdf = new MenuDoctorFrame();
        this.dispose();
        mdf.setVisible(true);
    }//GEN-LAST:event_btnVolverActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CitasDoctorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CitasDoctorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CitasDoctorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CitasDoctorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CitasDoctorFrame().setVisible(true);
            }
        });
    }

    private List<String[]> obtenerCitasPendientes() {
        try {
            List<String[]> citas = citaMedicaBO.citasMedicos(idMedico);
            return citas.stream().
                    filter(cita -> "PENDIENTE".equalsIgnoreCase(cita[6]))
                    .collect(Collectors.toList());// 6 = estado
        } catch (NegocioException e) {
            JOptionPane.showMessageDialog(this, "Error" + e.getMessage(), "Advertencia", JOptionPane.WARNING_MESSAGE);

        } catch (Exception ex) {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, "Error inesperado", ex);
            JOptionPane.showMessageDialog(this, "Ocurrió un error inesperado. Intente nuevamente", "Error", JOptionPane.ERROR_MESSAGE);
        }
        return null;
    }

    private void cargarCitasPendientesEnTabla() {
        List<String[]> citasPendientes = obtenerCitasPendientes();
        if (citasPendientes != null) {
            // Limpia el modelo por si tuviera datos previos
            modelo.setRowCount(0);

            // Por cada arreglo de Strings en la lista, agregas una fila
            for (String[] cita : citasPendientes) {
                // Ojo con el orden de los índices.
                // Tu tabla tiene columnas: "Paciente", "Estado", "Tipo", "Fecha", "Hora", "Folio"
                // Asegúrate de poner en cada columna el dato correcto. Ejemplo:
                // Paciente -> cita[x]
                // Estado   -> cita[y]
                // Tipo     -> cita[z]
                // Fecha    -> cita[w]
                // Hora     -> cita[u]
                // Folio    -> cita[v]

                // Supongamos que en tu arreglo `cita`, los índices son:
                // 0 -> idCita
                // 1 -> diaSemana (fecha)
                // 2 -> hora
                // 3 -> folio
                // 4 -> estado
                // 5 -> paciente
                // 6 -> tipo
                // Entonces para llenar la fila podrías hacer algo así:
                modelo.addRow(new Object[]{
                    cita[5], // Paciente
                    cita[4], // Estado
                    cita[6], // Tipo
                    cita[1], // Fecha (diaSemana)
                    cita[2], // Hora
                    cita[3] // Folio
                });
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCita;
    private javax.swing.JButton btnVolver;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaCitas;
    // End of variables declaration//GEN-END:variables
}
